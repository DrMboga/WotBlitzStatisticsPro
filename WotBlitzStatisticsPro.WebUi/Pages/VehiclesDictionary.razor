@inject IMediator Mediator
<h1 class="mt-2">Vehicles</h1>

@if(VehiclesByNations != null)
{
<div class="accordion" id="nationsAccorion">
@foreach (var vehicleNationKeyValue in VehiclesByNations)
{
    <div class="accordion-item">
    <h2 class="accordion-header" id="@($"Header_{vehicleNationKeyValue.Key}")">
      <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="@($"#Collapse_{vehicleNationKeyValue.Key}")" aria-expanded="false" aria-controls="@($"Collapse_{vehicleNationKeyValue.Key}")">
        <img src="@(vehicleNationKeyValue.Key.NationAsset())" width="55px" height="32px">
      </button>
    </h2>
    <div id="@($"Collapse_{vehicleNationKeyValue.Key}")" class="accordion-collapse collapse" aria-labelledby="@($"Header_{vehicleNationKeyValue.Key}")" data-bs-parent="#nationsAccorion">
      <div class="accordion-body">
        <table class="table">
            <tbody>
                @foreach (var vehicle in vehicleNationKeyValue.Value)
                {
                    <tr class="@(vehicle.Tier%2 == 0 ? "table-secondary" : "")">
                        <td>@vehicle.Tier.RomanNumber()</td>
                        <td><img src="@(vehicle.Type.TankTypeAsset(vehicle.IsPremium))" width="32px" height="32px"></td>
                        <td><img src="@vehicle.PreviewImage.ToLocalVehiclesUrl()" width="72px" height="53px"></td>
                        <td style="@(vehicle.IsPremium ? $"color: {Constants.ClanTagColor};" : string.Empty)">
                            @vehicle.TankId: <b>@vehicle.Name</b>
                        </td>
                        <td>@(vehicle.nextTanks != null ? string.Join("; ", vehicle.nextTanks.Select(t => $"{t.NextTankId} ({t.PriceXP} XP)").ToArray()) : "-")</td>
                        <td>
                            @if (vehicle.Modules != null)
                            {
                            <div class="accordion accordion-flush" id="@($"ModulesAccordion_{vehicle.TankId}")">
                            <div class="accordion-item">
                                <h2 class="accordion-header" id="@($"ModulesAccordionHeader{vehicle.TankId}")">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="@($"#modules-accordion-flush-collapsible-{vehicle.TankId}")" aria-expanded="false" aria-controls="@($"modules-accordion-flush-collapsible-{vehicle.TankId}")">
                                    Modules
                                </button>
                                </h2>
                                <div id="@($"modules-accordion-flush-collapsible-{vehicle.TankId}")" class="accordion-collapse collapse" aria-labelledby="@($"ModulesAccordionHeader{vehicle.TankId}")" data-bs-parent="@($"#ModulesAccordion_{vehicle.TankId}")">
                                <div class="accordion-body">
                                    <ul class="list-group">
                                        @foreach (var module in vehicle.Modules.OrderByDescending(m => m.IsDefault))
                                        {
                                            <li class="@(module.IsDefault ? "list-group-item list-group-item-secondary" : "list-group-item")">
                                                <img src="@(module.Type.ModuleAsset())" width="28px" height="28px"> @module.Name <b>@(module.IsDefault ? string.Empty : $"({module.PriceXp.ToString("N0")} XP)")</b>
                                            </li>
                                        }
                                    </ul>
                                </div>
                                </div>
                            </div>
                            </div>
                            }
                        </td>
                    </tr>
                    <tr class="@(vehicle.Tier%2 == 0 ? "table-secondary" : "")">
                        <td colspan="6">@vehicle.Description</td>
                    </tr>
                }
            </tbody>
        </table>
      </div>
    </div>
  </div>
}
</div>
}

@code {
    public Dictionary<string, DictionaryVehicleDto[]>? VehiclesByNations { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        var allVehicles = await Mediator.Send(new GetDictionaryVehiclesRequest());
        VehiclesByNations = allVehicles.GroupBy(
            v => v.Nation,
            (nation, vehicles) => new {
                Nation = nation, 
                Vehicles = vehicles
                    .OrderBy(v => v.IsPremium)
                    .ThenBy(v => v.Tier)
                    .ThenBy(v => v.Type)
                    .ToArray()})
            .ToDictionary(g => g.Nation, g => g.Vehicles);
    }
}