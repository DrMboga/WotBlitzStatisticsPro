@inject IStringLocalizer<App> Localize
@inject IMediator Mediator

<div class="d-flex flex-column mt-4">
  <div class="input-group">
    <span class="input-group-text" id="search-area"><img src="icons/tankists-200.png" width="32px" height="32px"></span>
    <input type="text" class="form-control" placeholder="@Localize["Find player"]" aria-label="FindPlayer" aria-describedby="search-area"
      value="@InputValue" @onchange="@(async (ChangeEventArgs __e) => await OnSearchTextrChanged(__e?.Value?.ToString()))" >
  </div>
  @if(Loading)
  {
    <div class="d-flex flex-column justify-content-center align-items-center mt-4">
    <div class="spinner-border text-info" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
    </div>
  }
  <ul class="list-group flex-fill mt-4">
    @foreach (var player in players)
    {
      <li class="list-group-item @(SelectedPlayer == player.AccountId ? "active" : string.Empty)"
          @onclick="@((e) => SelectedPlayer = player.AccountId)">
        <div class="d-flex flex-row align-items-center">
          <div class="flex-fill"><SearchPlayerListItem Player="@player"></SearchPlayerListItem></div>
          @if(SelectedPlayer == player.AccountId)
          {
          <button type="button" class="btn btn-secondary" 
            @onclick="@(async (e) => await OnPlayerInfoClicked(player.AccountId))"><img src="icons/tankist-200.png" width="24px" height="24px"></button>
          }
        </div>
      </li>
    }
  </ul>
</div>

@code {
    private string? InputValue { get; set; }

    private List<ShortPlayerInfoDto> players { get; set; } = new List<ShortPlayerInfoDto>();

    private long? SelectedPlayer { get; set; }

    private bool Loading { get; set; } = false;

    private async Task OnSearchTextrChanged(string? newValue)
    {
      if(!string.IsNullOrEmpty(newValue))
      {
        Loading = true;
        players = await Mediator.Send(new FindPlayersRequest(newValue));
        Loading = false;
      }
    }

    private async Task OnPlayerInfoClicked(long playerId)
    {
      await Mediator.Publish(new NavigateToPlayerInfoPageNotification(playerId));
    }
}