@using System.Globalization
@implements IDisposable
@inject NavigationManager NavigationManager
@inject IMediator Mediator
@inject IStringLocalizer<App> Localize

<nav class="navbar navbar-expand-lg navbar-dark bg-primary">
  <div class="container-fluid">
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
      <ul class="navbar-nav me-auto mb-2 mb-lg-0">
        <li class="nav-item">
          <a class="nav-link @GetActive("", NavLinkMatch.All)" aria-current="page" href="">@Localize["Home"]</a>
        </li>
        <li class="nav-item">
          <a class="nav-link @GetActive("dictionaries", NavLinkMatch.All)" aria-current="page" href="/dictionaries">@Localize["Dictionaries"]</a>
        </li>
      </ul>
      <div class="d-flex flex-row align-items-center gap-3">
        <img src="icons/@(IsDarkTheme ? "sun.svg" : "moon.svg")" alt="Theme" width="24" height="24" @onclick="@(async (arg) => await SwitchTheme())">
        <ul class="navbar-nav">
          <li class="nav-item dropdown">
            <a class="nav-link" href="#" id="navbarLocaleMenuLink" role="button" data-bs-toggle="dropdown" aria-expanded="false">
              <img src="@Flag(CurrentCulture)" width="40" height="24" alt="@CurrentCulture">
            </a>
            <ul class="dropdown-menu" aria-labelledby="navbarLocaleMenuLink">
              @foreach (var cultureInfo in CultureInfos)
              {
                  <li>
                    <button class="dropdown-item" type="button" @onclick="@(async (arg) => await SetLocale(cultureInfo.Key))">
                      <img src="@Flag(@cultureInfo.Value.Name)" width="40" height="24" alt="@cultureInfo.Value.Name">
                    </button>
                  </li>
              }
            </ul>
          </li>
        </ul>
      </div>
    </div>
  </div>
</nav>

@code {
    public bool IsDarkTheme { get; set; }

    private Dictionary<string, CultureInfo> CultureInfos { get; set; } = new()
    {
        { "en-US", new CultureInfo("en-US", false)},
        { "ru-RU", new CultureInfo("ru-RU", false)},
        { "de-DE", new CultureInfo("de-DE", false)}
    };

    private string CurrentCulture { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var localState = await Mediator.Send(new LocalStateRequest());
        IsDarkTheme = localState.IsDarkTheme;
        NavigationManager.LocationChanged += LocationChangedHandler;
        CurrentCulture = CultureInfo.CurrentCulture.Name;
    }

    private bool IsActive(string href, NavLinkMatch navLinkMatch = NavLinkMatch.Prefix)
    {
        var relativePath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri).ToLower();
        return navLinkMatch == NavLinkMatch.All ? relativePath == href.ToLower() : relativePath.StartsWith(href.ToLower());
    }

    private string GetActive(string href, NavLinkMatch navLinkMatch = NavLinkMatch.Prefix) => IsActive(href, navLinkMatch) ? "active" : "";

    private async Task SwitchTheme()
    {
        IsDarkTheme = !IsDarkTheme;
        await Mediator.Publish(new SwitchThemeNotification(IsDarkTheme));
        await Mediator.Publish(new SaveThemeNotification(IsDarkTheme));
    }

    private void LocationChangedHandler(Object? source, LocationChangedEventArgs args)
    {
        StateHasChanged();
    }

    private async Task SetLocale(string locale)
    {
        await Mediator.Publish(new ChangeCultureNotification(locale));
    }

    private string Flag(string locale)
    {
      switch(locale)
      {
        case "en-US":
          return "img/locale-usa.png";
        case "ru-RU":
          return "img/locale-russia.png";
        case "de-DE":
          return "img/locale-german.png";
      }
      return string.Empty;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= LocationChangedHandler;
    }
}